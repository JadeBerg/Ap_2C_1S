//+===================================================================
// Lab_6_Ap.cc
// Упаковка битовых групп
//
// Эта программа упаковывает битовые группы в динное беззнаковое число
 //
// (C) Струна В.Р., 2020
//
// Входные данные:
//	1----0------0	
//	! 00 !	mod !	mod
//	+----+------+	
//	2
//	11---2------0	
//	! 00 !	r_m !	r_m
//	+----+------+	
//	6	
//	23---12-----0	
//	! 00 !	kop !	kop
//	+----+------+	
//	12
//	29---24------0
//	! 00 !	cond !	cond
//	+----+-------+
//	10
// 	31---30-------0
//	! 00 !	range !	range
//	+----+-------+
//  2
// Выходные данные:
// Длинное целое беззнаковое число, которое содержит указанные битовые группы
//	31----+-----+-----+-----+--------0
//	! mod ! r_m ! kop ! cond ! range ! value 	
//	+-----+-----+-----+-----+--------+
//	  2	     6	   12	 10      2
//-===================================================================
#include <iostream>
#include <locale.h>
#include <iomanip>
using namespace std;

unsigned char mod, r_m, mod_a, r_m_a, range_a, range;
unsigned short kop, cond, kop_a, cond_a;
unsigned long value, value_a;
unsigned short tmp;
int main()
{
	setlocale(LC_ALL, "Rus");
	cout << "\n\t\t(C) Струна В.Р., 2020"
		<< "\n\t\tРаспаковка битовых групп"
		<< "\n\tУпаковать битовые группы, содержащиеся в целых числах,"
		<< "\n\t\tв 32-битовое целое число Value";
	for (;;)
	{
		cout << "\nПожалуйста, введите 1 16-х цифры для range (например, 1):";
		cin >> hex >> tmp;
		range = tmp;
		cout << "Пожалуйста, введите 3 16-х цифры для cond (например, 14e):";
		cin >> cond;
		cout << "Пожалуйста, введите 3 16-х цифры для kop (например, 8e7):";
		cin >> kop;
		cout << "Пожалуйста, введите 2 16-х цифры для r_m (например, 9db):";
		cin >> hex >> tmp;
		r_m = tmp;
		cout << "Пожалуйста, введите 1 16-ые цифры для mod (например,5):";
		cin >> hex >> tmp;
		mod = tmp;


		// Сделать копии исходных чисел для фагмента на ассемблере
		mod_a = mod;
		r_m_a = r_m;
		kop_a = kop;
		cond_a = cond;
		range_a = range;
		//=============================== C ==================================
		// Очистить старшие биты в каждом исходном числе
		range &= 0x3; // очистить все биты в числе, кроме 2 младших (1-0)
		cond &= 0x3ff; // очистить все биты в числе, кроме 10 младших (11-2)
		kop &= 0xfff; // очистить все биты в числе, кроме 12 младших (23-12)
		r_m &= 0x3f; // очистить все биты в числе, кроме 6 младших (29-24)
		mod &= 0x3; // очистить все биты в числе, кроме 2 младших (31-30)
		// Объединить каждое битовое поле с результирующим числом Value
		value = mod; // объединить поле mod с value
		value = (value << 6) | r_m; // объединить поле r_m с value
		value = (value << 12) | kop; // объединить поле kop с value
		value = (value << 10) | cond; // объединить поле cond с value
		value = (value << 2) | range; // объединить поле range с value
	 //============================ Assembler =============================
	 // Упаковать битовые группы
		__asm {
			// Очистить старшие биты в каждом исходном числе
			and range_a, 0x3
			and cond_a, 0x3ff
			and kop_a, 0xfff
			and r_m_a, 0x3f
			and mod_a, 0x3
			xor eax, eax
			// объединить поле mod с value
			or al, mod_a
			shl eax, 6
			// объединить поле r_m с value
			or al, r_m_a
			shl eax, 12
			// объединить поле kop с value
			or ax, kop_a
			shl eax, 10
			// объединить поле cond с value
			or ax, cond_a
			shl eax, 2
			// объединить поле range с value
			or al, range_a
			mov value_a, eax
		};
		// Форматный вывод результатов
		cout << hex
			<< "Результирующее упакованное число (C++): " << value
			<< "\nРезультирующее упакованное число (Asm): " << value_a
			<< endl;
	};
	return 0;
}